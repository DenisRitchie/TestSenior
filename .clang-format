# https://json.schemastore.org/clang-format.json
# https://clang.llvm.org/docs/ClangFormatStyleOptions.html
---
# We'll use defaults from the LLVM style, but with 4 columns indentation.
BasedOnStyle: Microsoft
IndentWidth: 4
JavaScriptQuotes: Double
JavaScriptWrapImports: true
SpaceBeforeJsonColon: false # clang-format 17
---
Language: Proto
# Don't format .proto files.
DisableFormat: true
---
Language: JavaScript
# Use 100 columns for JS.
ColumnLimit: 450
---
Language: Cpp
BasedOnStyle: Microsoft
AccessModifierOffset: -4
AlignAfterOpenBracket: BlockIndent # AlwaysBreak # Align
BracedInitializerIndentWidth: 4 # clang-format 17
AlignArrayOfStructures: Right # Left # clang-format 13
AlignConsecutiveMacros: # AcrossEmptyLinesAndComments
  Enabled:          true
  AcrossEmptyLines: true
  AcrossComments:   true
AlignConsecutiveAssignments: # AcrossComments # AcrossEmptyLinesAndComments # AlignCompound # PadOperators
  Enabled:               true
  AcrossEmptyLines:      false
  AcrossComments:        true
  AlignCompound:         true
  AlignFunctionPointers: false
  PadOperators:          true
AlignConsecutiveBitFields: # AcrossEmptyLinesAndComments # clang-format 11
  Enabled:          true
  AcrossEmptyLines: true
  AcrossComments:   true
AlignConsecutiveDeclarations: # AcrossComments # AcrossEmptyLinesAndComments # AcrossComments # AcrossEmptyLines
  Enabled:          true
  AcrossEmptyLines: false
  AcrossComments:   true
AlignConsecutiveShortCaseStatements:  # clang-format 17
  Enabled:          true
  AcrossEmptyLines: true
  AcrossComments:   true
  AlignCaseColons:  true
AlignEscapedNewlines: Left # LeftWithLastLine # Right
AlignOperands: AlignAfterOperator
AlignTrailingComments:
  Kind:           Always
  OverEmptyLines: 2
AllowAllArgumentsOnNextLine: false
# AllowAllConstructorInitializersOnNextLine: true # deprecated: Use PackConstructorInitializers
AllowBreakBeforeNoexceptSpecifier: Never # clang-format 18
AllowAllParametersOfDeclarationOnNextLine: true
AllowShortEnumsOnASingleLine: false
AllowShortBlocksOnASingleLine: Never
# AllowShortCaseExpressionOnASingleLine: true # clang-format 19
AllowShortCaseLabelsOnASingleLine: false
AllowShortCompoundRequirementOnASingleLine: true # clang-format 18
AllowShortFunctionsOnASingleLine: None
AllowShortLambdasOnASingleLine: Inline # None # All # Empty
AllowShortIfStatementsOnASingleLine: Never # WithoutElse
AllowShortLoopsOnASingleLine: false
# AlwaysBreakAfterDefinitionReturnType: None # deprecated: Use AlwaysBreakAfterReturnType
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: Yes
AttributeMacros:
  - __capability
  - __output
  - __ununsed
BinPackArguments: false
BinPackParameters: false
BitFieldColonSpacing: Both
BreakArrays: false # clang-format 16
BreakBeforeBraces: Custom # Allman
BraceWrapping:
  AfterCaseLabel:        true
  AfterClass:            true
  AfterControlStatement: Always
  AfterEnum:             true
  AfterFunction:         true
  AfterNamespace:        true
  AfterObjCDeclaration:  true
  AfterStruct:           true
  AfterUnion:            true
  AfterExternBlock:      true
  BeforeCatch:           true
  BeforeElse:            true
  BeforeLambdaBody:      true
  BeforeWhile:           true
  IndentBraces:          false
  SplitEmptyFunction:    true
  SplitEmptyRecord:      true
  SplitEmptyNamespace:   true
BreakBeforeBinaryOperators: None
BreakBeforeConceptDeclarations: Always # clang-format 13
BreakBeforeInlineASMColon: OnlyMultiline # clang-format 16
BreakBeforeInheritanceComma: false
# BreakFunctionDefinitionParameters: false # clang-format 19
BreakInheritanceList: BeforeComma # BeforeColon
# BreakTemplateDeclarations: Leave # clang-format 19
BreakBeforeTernaryOperators: true
BreakConstructorInitializers: BeforeComma
BreakAfterJavaFieldAnnotations: false
BreakAdjacentStringLiterals: true # clang-format 18
BreakAfterAttributes: Never # Leave # clang-format 16
BreakStringLiterals: true
# BreakAfterReturnType: Automatic # clang-format 19
ColumnLimit: 450
CommentPragmas:  '^ INDRA pragma:'
CompactNamespaces: false
# ConstructorInitializerAllOnOneLineOrOnePerLine: false # deprecated: PackConstructorInitializers
ConstructorInitializerIndentWidth: 4
ContinuationIndentWidth: 2
Cpp11BracedListStyle: false
DeriveLineEnding: true
DerivePointerAlignment: false
DisableFormat: false
EmptyLineAfterAccessModifier: Never # clang-format 13
EmptyLineBeforeAccessModifier: LogicalBlock # clang-format 13
ExperimentalAutoDetectBinPacking: false
FixNamespaceComments: true
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
  - FOREACH
  - RANGES_FOR
IfMacros: # clang-format 14
  - IF
  - KJ_IF_MAYBE
IncludeBlocks: Preserve # Regroup
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    2
    CaseSensitive:   true
  - Regex:           '^((<|")(gtest|gmock|isl|json)/)'
    Priority:        3
  - Regex:           '<[[:alnum:].]+>'
    Priority:        4
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
IncludeIsMainRegex: '(Test)?$'
IncludeIsMainSourceRegex: ''
IndentAccessModifiers: false # clang-format 13
IndentCaseLabels: true
IndentCaseBlocks: false
IndentGotoLabels: true
IndentPPDirectives: BeforeHash # AfterHash
IndentExternBlock: AfterExternBlock
IndentRequires: false
IndentRequiresClause: false # clang-format 15
IndentWidth: 4
IndentWrappedFunctionNames: false
InsertBraces: false # clang-format 15
InsertTrailingCommas: None
InsertNewlineAtEOF: true # clang-format 16
IntegerLiteralSeparator: # clang-format 16 # https://clang.llvm.org/docs/ClangFormatStyleOptions.html#integerliteralseparator
  Binary:   0 # 4
  Decimal:  0 # 3
  Hex:     -1 #
KeepEmptyLinesAtEOF: true # clang-format 17
KeepEmptyLinesAtTheStartOfBlocks: true
# KeepEmptyLines: # clang-format 19
#   AtEndOfFile:    false
#   AtStartOfBlock: true
#   AtStartOfFile:  true
LambdaBodyIndentation: Signature # clang-format 13
LineEnding: CRLF # clang-format 16
MacroBlockBegin: "^NS_MAP_BEGIN|NS_TABLE_HEAD$"
MacroBlockEnd: "^NS_MAP_END|NS_TABLE_.*_END$"
# Macros: # clang-format 17
MaxEmptyLinesToKeep: 1
# MainIncludeChar: Any # clang-format 19
NamespaceIndentation: All
NamespaceMacros: # clang-format 9
  - TESTSUITE
  - NAMESPACE
ObjCBinPackProtocolList: Auto
ObjCBlockIndentWidth: 2
ObjCBreakBeforeNestedBlockParam: true
ObjCSpaceAfterProperty: false
ObjCSpaceBeforeProtocolList: true
PPIndentWidth: 1 # clang-format 13
PackConstructorInitializers: Never # clang-format 14
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 20
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 10 # clang-format 14
PenaltyBreakScopeResolution: 10 # clang-format 18
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyReturnTypeOnItsOwnLine: 1000
PenaltyIndentedWhitespace: 0
PointerAlignment: Left
QualifierAlignment: Custom # Leave # clang-format 14
QualifierOrder: ['inline', 'static', 'constexpr', 'const', 'volatile', 'type', 'restrict']
RawStringFormats:
  - Language: TextProto
    Delimiters:
      - 'pb'
      - 'proto'
    EnclosingFunctions:
      - 'PARSE_TEXT_PROTO'
    BasedOnStyle: google
  - Language: Cpp
    Delimiters:
      - 'hpp'
      - 'hxx'
      - 'cc'
      - 'cpp'
      - 'cxx'
    BasedOnStyle: llvm
    CanonicalDelimiter: 'Cpp'
ReferenceAlignment: Pointer # clang-format 13
ReflowComments: true
RemoveBracesLLVM: false # clang-format 14
RemoveSemicolon: true # clang-format 16
RemoveParentheses: MultipleParentheses # clang-format 17
RequiresClausePosition: OwnLine # clang-format 15
RequiresExpressionIndentation: Keyword # OuterScope # clang-format 16
SeparateDefinitionBlocks: Always # clang-format 14
ShortNamespaceLines: 1 # clang-format 14
SkipMacroDefinitionBody: true # clang-format 18 # Do not format macro definition body.
SortIncludes: Never
SortJavaStaticImport: Before
SortUsingDeclarations: true
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: false
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: true
SpaceBeforeInheritanceColon: true
SpaceBeforeJsonColon: false # clang-format 17
SpaceBeforeParens: Custom # clang-format 14
SpaceBeforeParensOptions: # clang-format 14
  AfterControlStatements:       true
  AfterForeachMacros:           false
  AfterFunctionDeclarationName: false
  AfterFunctionDefinitionName:  false
  AfterIfMacros:                false
  AfterOverloadedOperator:      false
  AfterPlacementOperator:       true
  AfterRequiresInClause:        true
  AfterRequiresInExpression:    true
  BeforeNonEmptyParentheses:    false
SpacesInParensOptions: # clang-format 17
  # ExceptDoubleParentheses: false
  InConditionalStatements: true
  InCStyleCasts:           false
  InEmptyParentheses:      false
  Other:                   false
SpaceAroundPointerQualifiers: Default
SpaceBeforeRangeBasedForLoopColon: true
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: true
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 1
SpacesInAngles: Never # clang-format 14
SpacesInConditionalStatement: true
SpacesInContainerLiterals: false
SpacesInCStyleCastParentheses: false
SpacesInLineCommentPrefix: # clang-format 14
  Minimum: 1
  Maximum: -1
SpacesInParentheses: false
SpacesInSquareBrackets: false
Standard: Latest
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
StatementAttributeLikeMacros:
  - Q_EMIT
TabWidth: 4
TypenameMacros:
  - STACK_OF
  - LIST_ENTRY
TypeNames: [ 'byte_t' ]
UseCRLF: false
UseTab: Never
VerilogBreakBetweenInstancePorts: true # clang-format 17
WhitespaceSensitiveMacros:
  - STRINGIZE
  - PP_STRINGIZE
  - BOOST_PP_STRINGIZE
  - NS_SWIFT_NAME
  - CF_SWIFT_NAME
...
